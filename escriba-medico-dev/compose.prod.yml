services:
  db:
    image: postgres:15-alpine
    container_name: medical_scribe_db_prod
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount the initialization script
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env.production
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medical_scribe_backend_prod
    restart: unless-stopped
    env_file:
      - .env.production
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      # This magical line tells docker-compose to copy the files from /app/dist
      # from the builder stage into a volume that nginx can use.
      # It doesn't actually run the frontend container.
      target: builder
    container_name: medical_scribe_frontend_build_prod
    # No need to run this container, it's just for building
    restart: "no"
    volumes:
      - frontend_dist:/app/dist

  nginx:
    image: nginx:1.25-alpine
    container_name: medical_scribe_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # This will be the final, generated nginx config
      # Removed :ro flag to allow Nginx entrypoint scripts to modify the file
      - ./nginx/generated_nginx.conf:/etc/nginx/conf.d/default.conf
      # We also need a basic nginx.conf that includes conf.d/*.conf
      - ./nginx/base_nginx.conf:/etc/nginx/nginx.conf
      # This volume will hold the built static assets from the frontend service
      - frontend_dist:/usr/share/nginx/html
      - webroot_data:/var/www/certbot
      - certbot_etc:/etc/letsencrypt
    depends_on:
      - backend
      - frontend

  certbot:
    image: certbot/certbot:v2.5.0
    container_name: medical_scribe_certbot_prod
    volumes:
      - webroot_data:/var/www/certbot
      - certbot_etc:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --quiet --no-random-sleep; sleep 12h & wait $${!}; done;'"
    healthcheck:
      test: [ "CMD-SHELL", "certbot renew --dry-run --quiet" ]
      interval: 12h
      timeout: 30s
      retries: 3

volumes:
  postgres_data:
  webroot_data:
  certbot_etc:
  frontend_dist:
